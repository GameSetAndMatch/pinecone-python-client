name: 'Migration Tests'

on:
  workflow_dispatch: {}
  workflow_call: 
    inputs:
      environment: 
        description: 'Environment to test'
        required: true
        type: string
        
env:
  NUM_VECTORS: 1000
  DIMENSION: 1536
  METRIC: cosine
  LEGACY_CLIENT_VERSION: 2.2.4
  NEW_CLIENT_VERSION: 3.0.0.dev10

jobs:
  create-index:
    name: Create index
    runs-on: ubuntu-latest
    outputs:
      index_name: ${{ steps.create-legacy.outputs.index_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create index and upsert (legacy)
        id: create-legacy
        uses: ./.github/actions/create-index-legacy
        with:
          PINECONE_API_KEY: ${{ secrets.V3MIGRATION_API_KEY__ONE_KEY_MANY_ENVS }}
          PINECONE_ENVIRONMENT: ${{ inputs.environment }}
          pinecone_client_version: ${{ env.LEGACY_CLIENT_VERSION }}
          index_name_prefix: py-migration
          dimension: ${{ env.DIMENSION }}
          metric: ${{ env.METRIC }}
          vectors_to_upsert: ${{ ENV.NUM_VECTORS }}

  test-index-gcps:
      needs: [create-index]
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4
        - name: Test index (GCPS)
          id: inspect-gcps
          uses: ./.github/actions/test-legacy-index
          with:
            PINECONE_API_KEY: ${{ secrets.V3MIGRATION_API_KEY__ONE_KEY_MANY_ENVS }}
            PINECONE_ENVIRONMENT: ${{ inputs.environment }}
            pinecone_client_version: ${{ env.NEW_CLIENT_VERSION }}
            index_name: ${{ needs.create-index.outputs.index_name }}

  create-collection:
    needs: [create-index]
    runs-on: ubuntu-latest
    outputs:
      collection_name: ${{ steps.create-collection-legacy.outputs.collection_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create collection (legacy)
        id: create-collection-legacy
        uses: ./.github/actions/create-collection-legacy
        with:
          PINECONE_API_KEY: ${{ secrets.V3MIGRATION_API_KEY__ONE_KEY_MANY_ENVS }}
          PINECONE_ENVIRONMENT: ${{ inputs.environment }}
          pinecone_client_version: ${{ env.LEGACY_CLIENT_VERSION }}
          collection_name_prefix: py-coll
          index_name: ${{ needs.create-index.outputs.index_name }}

  test-collection-new:
    needs: [create-collection]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Inspect collection (new)
        id: inspect-collection-new
        uses: ./.github/actions/test-collection
        with:
          PINECONE_API_KEY: ${{ secrets.V3MIGRATION_API_KEY__ONE_KEY_MANY_ENVS }}
          PINECONE_ENVIRONMENT: ${{ inputs.environment }}
          pinecone_client_version: ${{ env.NEW_CLIENT_VERSION }}
          collection_name: ${{ needs.create-collection.outputs.collection_name }}

  cleanup-index:
    if: always()
    needs: [test-index-gcps, create-index]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Delete all indexes
        uses: ./.github/actions/delete-index
        with:
          PINECONE_API_KEY: ${{ secrets.V3MIGRATION_API_KEY__ONE_KEY_MANY_ENVS }}
          index_name: ${{ needs.create-index.outputs.index_name }}

  cleanup-collection:
    if: always()
    needs: [test-collection-new, create-collection]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Delete collection
        uses: ./.github/actions/delete-all-collections
        with:
          PINECONE_API_KEY: ${{ secrets.V3MIGRATION_API_KEY__ONE_KEY_MANY_ENVS }}
          collection_name: ${{ needs.create-collection.outputs.collection_name }}